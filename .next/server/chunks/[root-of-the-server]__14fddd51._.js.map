{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///D:/PE_SDN/qe180096/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI  = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\nlet cached = (global as any).mongoose;\r\n\r\nif (!cached) {\r\n  cached = (global as any).mongoose = { conn: null, promise: null };\r\n}\r\n\r\nexport async function connectMongo() {\r\n  if (cached.conn && cached.conn.readyState === 1) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI).then((mongoose) => mongoose.connection);\r\n  }\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAe,QAAQ,GAAG,CAAC,WAAW;AAE5C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,AAAC,OAAe,QAAQ;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,AAAC,OAAe,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAClE;AAEO,eAAe;IACpB,IAAI,OAAO,IAAI,IAAI,OAAO,IAAI,CAAC,UAAU,KAAK,GAAG;QAC/C,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC,WAAa,SAAS,UAAU;IACvF;IACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///D:/PE_SDN/qe180096/lib/models/Post.ts"],"sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\r\n\r\nexport interface IPost extends Document {\r\n  name: string;\r\n  description: string;\r\n  imageUrl?: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nconst PostSchema: Schema = new Schema({\r\n  name: { type: String, required: true },\r\n  description: { type: String, required: true },\r\n  imageUrl: { type: String, required: false },\r\n}, { timestamps: true }); // Tự động thêm createdAt và updatedAt\r\n\r\nconst Post = mongoose.models.Post || mongoose.model<IPost>('Post', PostSchema);\r\n\r\nexport default Post;"],"names":[],"mappings":";;;AAAA;;AAUA,MAAM,aAAqB,IAAI,yGAAA,CAAA,SAAM,CAAC;IACpC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAM;AAC5C,GAAG;IAAE,YAAY;AAAK,IAAI,sCAAsC;AAEhE,MAAM,OAAO,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ;uCAEpD","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///D:/PE_SDN/qe180096/app/api/post/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { connectMongo } from '@/lib/db';\r\nimport Post, { IPost } from '@/lib/models/Post';\r\n\r\n// [1] GET: Lấy danh sách tất cả bài viết (có hỗ trợ tìm kiếm và sắp xếp)\r\nexport async function GET(request: Request) {\r\n  await connectMongo();\r\n  try {\r\n    const { searchParams } = new URL(request.url);\r\n    const searchQuery = searchParams.get('search') || '';\r\n    const sortOrder = searchParams.get('sort') || ''; // 'asc' hoặc 'desc'\r\n\r\n    let query: any = {};\r\n    if (searchQuery) {\r\n      query.name = { $regex: searchQuery, $options: 'i' }; // Tìm kiếm không phân biệt chữ hoa/thường\r\n    }\r\n\r\n    let sort: any = {};\r\n    if (sortOrder === 'asc') {\r\n      sort.name = 1;\r\n    } else if (sortOrder === 'desc') {\r\n      sort.name = -1;\r\n    } else {\r\n      sort.createdAt = -1; // Mặc định sắp xếp theo mới nhất\r\n    }\r\n\r\n    const posts: IPost[] = await Post.find(query).sort(sort);\r\n    return NextResponse.json(posts);\r\n  } catch (error) {\r\n    console.error('Error fetching posts:', error);\r\n    return NextResponse.json({ message: 'Failed to fetch posts', error }, { status: 500 });\r\n  }\r\n}\r\n\r\n// [2] POST: Tạo bài viết mới\r\nexport async function POST(request: Request) {\r\n  await connectMongo();\r\n  try {\r\n    const body: IPost = await request.json();\r\n    if (!body.name || !body.description) {\r\n      return NextResponse.json({ message: 'Name and Description are required' }, { status: 400 });\r\n    }\r\n    const newPost = await Post.create(body);\r\n    return NextResponse.json(newPost, { status: 201 });\r\n  } catch (error) {\r\n    console.error('Error creating post:', error);\r\n    return NextResponse.json({ message: 'Failed to create post', error }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAGO,eAAe,IAAI,OAAgB;IACxC,MAAM,CAAA,GAAA,2GAAA,CAAA,eAAY,AAAD;IACjB,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,cAAc,aAAa,GAAG,CAAC,aAAa;QAClD,MAAM,YAAY,aAAa,GAAG,CAAC,WAAW,IAAI,oBAAoB;QAEtE,IAAI,QAAa,CAAC;QAClB,IAAI,aAAa;YACf,MAAM,IAAI,GAAG;gBAAE,QAAQ;gBAAa,UAAU;YAAI,GAAG,0CAA0C;QACjG;QAEA,IAAI,OAAY,CAAC;QACjB,IAAI,cAAc,OAAO;YACvB,KAAK,IAAI,GAAG;QACd,OAAO,IAAI,cAAc,QAAQ;YAC/B,KAAK,IAAI,GAAG,CAAC;QACf,OAAO;YACL,KAAK,SAAS,GAAG,CAAC,GAAG,iCAAiC;QACxD;QAEA,MAAM,QAAiB,MAAM,uHAAA,CAAA,UAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC;QACnD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAyB;QAAM,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF;AAGO,eAAe,KAAK,OAAgB;IACzC,MAAM,CAAA,GAAA,2GAAA,CAAA,eAAY,AAAD;IACjB,IAAI;QACF,MAAM,OAAc,MAAM,QAAQ,IAAI;QACtC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,WAAW,EAAE;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAoC,GAAG;gBAAE,QAAQ;YAAI;QAC3F;QACA,MAAM,UAAU,MAAM,uHAAA,CAAA,UAAI,CAAC,MAAM,CAAC;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAyB;QAAM,GAAG;YAAE,QAAQ;QAAI;IACtF;AACF","debugId":null}}]
}