{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///D:/PE_SDN/qe180096/lib/db.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst MONGODB_URI  = process.env.MONGODB_URI as string;\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n}\r\n\r\nlet cached = (global as any).mongoose;\r\n\r\nif (!cached) {\r\n  cached = (global as any).mongoose = { conn: null, promise: null };\r\n}\r\n\r\nexport async function connectMongo() {\r\n  if (cached.conn && cached.conn.readyState === 1) {\r\n    return cached.conn;\r\n  }\r\n\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI).then((mongoose) => mongoose.connection);\r\n  }\r\n  cached.conn = await cached.promise;\r\n  return cached.conn;\r\n}"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAe,QAAQ,GAAG,CAAC,WAAW;AAE5C,IAAI,CAAC,aAAa;IAChB,MAAM,IAAI,MAAM;AAClB;AAEA,IAAI,SAAS,AAAC,OAAe,QAAQ;AAErC,IAAI,CAAC,QAAQ;IACX,SAAS,AAAC,OAAe,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAClE;AAEO,eAAe;IACpB,IAAI,OAAO,IAAI,IAAI,OAAO,IAAI,CAAC,UAAU,KAAK,GAAG;QAC/C,OAAO,OAAO,IAAI;IACpB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC,WAAa,SAAS,UAAU;IACvF;IACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IAClC,OAAO,OAAO,IAAI;AACpB","debugId":null}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///D:/PE_SDN/qe180096/lib/models/Contact.ts"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst contactSchema = new mongoose.Schema({\r\n  name: { type: String, required: true },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    match: [/^\\S+@\\S+\\.\\S+$/, 'Invalid email format'],\r\n  },\r\n  phone: String,\r\n  group: {\r\n    type: String,\r\n    enum: ['Friends', 'Work', 'Family', 'Other'],\r\n    default: 'Other',\r\n  },\r\n}, { timestamps: true });\r\n\r\nexport const Contact = mongoose.models.Contact || mongoose.model('Contact', contactSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACxC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QACL,MAAM;QACN,UAAU;QACV,OAAO;YAAC;YAAkB;SAAuB;IACnD;IACA,OAAO;IACP,OAAO;QACL,MAAM;QACN,MAAM;YAAC;YAAW;YAAQ;YAAU;SAAQ;QAC5C,SAAS;IACX;AACF,GAAG;IAAE,YAAY;AAAK;AAEf,MAAM,UAAU,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":["file:///D:/PE_SDN/qe180096/app/api/contacts/%5Bid%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { connectMongo } from '@/lib/db';\r\nimport { Contact } from '@/lib/models/Contact';\r\n\r\nexport async function GET(req: NextRequest, context: { params: { id: string } }) {\r\n  await connectMongo();\r\n  const { id } = context.params;\r\n\r\n  const contact = await Contact.findById(id);\r\n  if (!contact) return NextResponse.json({ message: 'Not found' }, { status: 404 });\r\n\r\n  return NextResponse.json(contact);\r\n}\r\n\r\nexport async function PUT(req: NextRequest, context: { params: { id: string } }) {\r\n  await connectMongo();\r\n  const { id } = context.params;\r\n  const data = await req.json();\r\n\r\n  // Kiểm tra email hoặc phone trùng với người khác (trừ chính nó)\r\n  const existing = await Contact.findOne({\r\n    _id: { $ne: id },\r\n    $or: [\r\n      { email: data.email },\r\n      { phone: data.phone },\r\n    ],\r\n  });\r\n\r\n  if (existing) {\r\n    return NextResponse.json(\r\n      { message: 'Email hoặc số điện thoại đã tồn tại' },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  const updated = await Contact.findByIdAndUpdate(id, data, { new: true });\r\n  if (!updated) return NextResponse.json({ message: 'Not found' }, { status: 404 });\r\n\r\n  return NextResponse.json(updated);\r\n}\r\n\r\nexport async function DELETE(req: NextRequest, context: { params: { id: string } }) {\r\n  await connectMongo();\r\n  const { id } = context.params;\r\n\r\n  const deleted = await Contact.findByIdAndDelete(id);\r\n  if (!deleted) return NextResponse.json({ message: 'Not found' }, { status: 404 });\r\n\r\n  return NextResponse.json({ message: 'Deleted' });\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,GAAgB,EAAE,OAAmC;IAC7E,MAAM,CAAA,GAAA,2GAAA,CAAA,eAAY,AAAD;IACjB,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,MAAM;IAE7B,MAAM,UAAU,MAAM,0HAAA,CAAA,UAAO,CAAC,QAAQ,CAAC;IACvC,IAAI,CAAC,SAAS,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAY,GAAG;QAAE,QAAQ;IAAI;IAE/E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAEO,eAAe,IAAI,GAAgB,EAAE,OAAmC;IAC7E,MAAM,CAAA,GAAA,2GAAA,CAAA,eAAY,AAAD;IACjB,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,MAAM;IAC7B,MAAM,OAAO,MAAM,IAAI,IAAI;IAE3B,gEAAgE;IAChE,MAAM,WAAW,MAAM,0HAAA,CAAA,UAAO,CAAC,OAAO,CAAC;QACrC,KAAK;YAAE,KAAK;QAAG;QACf,KAAK;YACH;gBAAE,OAAO,KAAK,KAAK;YAAC;YACpB;gBAAE,OAAO,KAAK,KAAK;YAAC;SACrB;IACH;IAEA,IAAI,UAAU;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAsC,GACjD;YAAE,QAAQ;QAAI;IAElB;IAEA,MAAM,UAAU,MAAM,0HAAA,CAAA,UAAO,CAAC,iBAAiB,CAAC,IAAI,MAAM;QAAE,KAAK;IAAK;IACtE,IAAI,CAAC,SAAS,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAY,GAAG;QAAE,QAAQ;IAAI;IAE/E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAEO,eAAe,OAAO,GAAgB,EAAE,OAAmC;IAChF,MAAM,CAAA,GAAA,2GAAA,CAAA,eAAY,AAAD;IACjB,MAAM,EAAE,EAAE,EAAE,GAAG,QAAQ,MAAM;IAE7B,MAAM,UAAU,MAAM,0HAAA,CAAA,UAAO,CAAC,iBAAiB,CAAC;IAChD,IAAI,CAAC,SAAS,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAY,GAAG;QAAE,QAAQ;IAAI;IAE/E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAU;AAChD","debugId":null}}]
}